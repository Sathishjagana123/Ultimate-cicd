pipeline {
    agent {
        docker {
            image 'abhishekf5/maven-abhishek-docker-agent:v1'
            args '--user root -v /var/run/docker.sock:/var/run/docker.sock' // mount Docker socket to access the host's Docker daemon
        }
    }
    stages {
        stage('Checkout') {
            steps {
                sh 'echo passed'
                git branch: 'main', url: 'https://github.com/Sathishjagana123/JavaSpringboot_application.git'
            }
        }
        stage('Build and Test') {
            steps {
                sh 'ls -ltr'
                // build the project and create a JAR file
                sh 'mvn clean package'
            }
        }
        stage('Static Code Analysis') {
            environment {
                SONAR_URL = "http://107.23.92.231:9000/"
            }
            steps {
                withCredentials([string(credentialsId: 'Sonar-token', variable: 'SONAR_AUTH_TOKEN')]) {
                    sh 'mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
                }
            }
        }
        stage('Build and Push Docker Image') {
            environment {
                DOCKER_IMAGE = "javaspringbootapplication/ultimate-cicd:${BUILD_NUMBER}"
                // DOCKERFILE_LOCATION = "Dockerfile"
                REGISTRY_CREDENTIALS = credentials('docker-cred')
            }
            steps {
                script {
                    // Define the Docker image tag
                    def DOCKER_IMAGE = "abhishekf5/ultimate-cicd:${BUILD_NUMBER}"

                    // Build the Docker image with the corrected Dockerfile location
                    sh "docker build -t ${DOCKER_IMAGE} -f Dockerfile ."

                    // Define the Docker image instance
                    def dockerImage = docker.image("${DOCKER_IMAGE}")

                    // Log in to the Docker registry using your registry credentials
                    //docker.withRegistry('https://index.docker.io/v1/', 'docker-cred') {
                    //sh "docker push ${DOCKER_IMAGE}"
                    // }
                }
            }
        }
        stage('Update Deployment File') {
            environment {
                GIT_REPO_NAME = "JavaSpringboot_application"
                GIT_USER_NAME = "Sathishjagana123"
            }
            steps {
                withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
                    sh '''
                    git config user.email "satishjagana123@gmail.com"
                    git config user.name "Sathishjagana123"
                    BUILD_NUMBER=${BUILD_NUMBER}
                    sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" JavaSpringboot_application/deployment.yml
                    git add JavaSpringboot_application/deployment.yml
                    git commit -m "Update deployment image to version ${BUILD_NUMBER}"
                    git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
                    '''
                }
            }
        }
    }
}
